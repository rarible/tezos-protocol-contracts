archetype bids(
    owner: address,
    protocol_fee: nat,
    transfer_manager: address,
    bids_storage: address
)
with metadata ""

constant MISSING_BID: string = "MISSING_BID"
constant BID_AMOUNT_MISMATCH: string = "BID_AMOUNT_MISMATCH"
constant ONLY_BIDDER_CAN_CANCEL_AUCTION: string = "ONLY_BIDDER_CAN_CANCEL_AUCTION"
constant CANT_UNPACK_FA2_ASSET: string = "CANT_UNPACK_FA2_ASSET"
constant CANT_UNPACK_FA12_ASSET: string = "CANT_UNPACK_FA12_ASSET"
constant WRONG_XTZ_PAYLOAD: string = "WRONG_XTZ_PAYLOAD"
constant CANT_UNPACK_BUNDLE: string = "CANT_UNPACK_BUNDLE"
constant MAX_BUNDLE_SIZE: string = "MAX_BUNDLE_SIZE"
constant INVALID_BUNDLE_ITEM_QTY: string = "INVALID_BUNDLE_ITEM_QTY"
constant BUNDLE_CANT_BE_EMPTY: string = "BUNDLE_CANT_BE_EMPTY"
constant EXPIRED_BID: string = "EXPIRED_BID"

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none
variable max_bundle_items : nat = 10
variable default_bid_duration: duration = 1w

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  called by opt_get(owner_candidate)
  effect {
    owner := opt_get(owner_candidate);
    owner_candidate := none
  }
}


//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_bids_storage_contract(sbsc_contract : address) {
  called by owner
  effect {
    bids_storage := sbsc_contract;
  }
}

entry set_protocol_fee(spf : nat) {
  called by owner
  effect {
    protocol_fee := spf;
  }
}

entry set_max_bundle_items(smbi_number : nat) {
  called by owner
  effect {
    max_bundle_items := smbi_number;
  }
}
//----------------------------------------------------------------------------
// Types
//----------------------------------------------------------------------------
enum asset_type =
| XTZ
| FA12
| FA2


record FA2_asset {
  fa2_asset_contract : address;
  fa2_asset_token_id: nat;
}

record FA12_asset {
  fa12_asset_contract : address;
}

record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

record process_transfer_param {
  ptp_asset_type: asset_type;
  ptp_asset: bytes;
  ptp_amount: nat;
  ptp_origin: address;
  ptp_destination: address;
}

record part {
  part_account : address;
  part_value   : nat;
}

record fees {
  origin_fees : list<part>;
  payouts: list<part>;
}

record bid {
  bid_origin_fees : list<part>;
  bid_payouts : list<part>;
  bid_amount : nat;
  bid_asset_qty: nat;
  bid_expiry_date : option<date>;
  bid_data_type  : option<bytes>;
  bid_data       : option<bytes>;
}

record bundle_item {
  bundle_item_contract : address;
  bundle_item_id   : nat;
  bundle_item_qty: nat;
}

record bundle_bid {
  bundle_bid_origin_fees : list<part>;
  bundle_bid_payouts : list<part>;
  bundle_bid_amount : nat;
  bundle_bid_expiry_date : option<date>;
  bundle_bid_data_type  : option<bytes>;
  bundle_bid_data       : option<bytes>;
}

entry put_bid(
  pb_asset_contract: address,
  pb_asset_token_id: nat,
  pb_bid_type: asset_type,
  pb_bid_asset: bytes,
  pb_bid : bid) {
    require {
        r_pb0: pb_bid.bid_amount > 0;
        r_pb2: pb_bid.bid_asset_qty > 0;
        r_pb3: pb_bid_type = FA2
            or
            pb_bid_type = FA12
            or
            pb_bid_type = XTZ;
    }
    effect {
      var current_bid = get_bid(pb_asset_contract, pb_asset_token_id, caller, pb_bid_type, pb_bid_asset);
      var is_xtz = (pb_bid_type = XTZ);
      var unpack_result = verify_and_unpack_asset(pb_bid_type, pb_bid_asset);

      if(isnone(pb_bid.bid_expiry_date)) then (
        pb_bid.bid_expiry_date := some((now + default_bid_duration));
      );

      var all_operations: list<process_transfer_param> = [];
      if(issome(current_bid)) then (
          var current_bid_data = opt_get(current_bid);
          transfer 0tz to bids_storage call process_transfers<list<process_transfer_param>>([{
            ptp_asset_type = pb_bid_type;
            ptp_asset = pb_bid_asset;
            ptp_amount = current_bid_data.bid_amount;
            ptp_origin = bids_storage;
            ptp_destination = caller
          }]);
      );

      if(not is_xtz) then (
        transfer 0tz to transfer_manager call process_transfers<list<process_transfer_param>>([{
            ptp_asset_type = pb_bid_type;
            ptp_asset = pb_bid_asset;
            ptp_amount = pb_bid.bid_amount;
            ptp_origin = caller;
            ptp_destination = bids_storage
        }]);
      ) else (
        dorequire(transferred = (pb_bid.bid_amount * 1utz), (BID_AMOUNT_MISMATCH, transferred, pb_bid.bid_amount * 1utz));
      );


      transfer transferred to bids_storage call set_bid<address * nat * address * asset_type * bytes * bid>(
        (
          pb_asset_contract,
          pb_asset_token_id,
          caller,
          pb_bid_type,
          pb_bid_asset,
          pb_bid
        )
      );
    }
}

entry put_floor_bid(
  pfb_asset_contract: address,
  pfb_bid_type: asset_type,
  pfb_bid_asset: bytes,
  pfb_bid : bid) {
    require {
        r_pfb0: pfb_bid.bid_amount > 0;
        r_pfb2: pfb_bid.bid_asset_qty > 0;
        r_pfb3: pfb_bid_type = FA2
            or
            pfb_bid_type = FA12
            or
            pfb_bid_type = XTZ;
    }
    effect {
      var current_bid = get_floor_bid(pfb_asset_contract, caller, pfb_bid_type, pfb_bid_asset);
      var is_xtz = (pfb_bid_type = XTZ);
      var unpack_result = verify_and_unpack_asset(pfb_bid_type, pfb_bid_asset);

      if(isnone(pfb_bid.bid_expiry_date)) then (
        pfb_bid.bid_expiry_date := some((now + default_bid_duration));
      );

      var all_operations: list<process_transfer_param> = [];
      if(issome(current_bid)) then (
          var current_bid_data = opt_get(current_bid);
          transfer 0tz to bids_storage call process_transfers<list<process_transfer_param>>([{
            ptp_asset_type = pfb_bid_type;
            ptp_asset = pfb_bid_asset;
            ptp_amount = current_bid_data.bid_amount;
            ptp_origin = bids_storage;
            ptp_destination = caller
          }]);
      );

      if(not is_xtz) then (
        transfer 0tz to transfer_manager call process_transfers<list<process_transfer_param>>([{
            ptp_asset_type = pfb_bid_type;
            ptp_asset = pfb_bid_asset;
            ptp_amount = pfb_bid.bid_amount;
            ptp_origin = caller;
            ptp_destination = bids_storage
        }]);
      ) else (
        dorequire(transferred = (pfb_bid.bid_amount * 1utz), (BID_AMOUNT_MISMATCH, transferred, pfb_bid.bid_amount * 1utz));
      );

      transfer transferred to bids_storage call set_floor_bid<address * address * asset_type * bytes * bid>(
        (
          pfb_asset_contract,
          caller,
          pfb_bid_type,
          pfb_bid_asset,
          pfb_bid
        )
      );
    }
}

entry put_bundle_bid(
  pbb_bundle: bytes,
  pbb_bid_type: asset_type,
  pbb_bid_asset: bytes,
  pbb_bid : bundle_bid) {
    require {
        r_pbb0: pbb_bid.bundle_bid_amount > 0;
        r_pbb1: pbb_bid_type = FA2
            or
            pbb_bid_type = FA12
            or
            pbb_bid_type = XTZ;
    }
    effect {
      var current_bid = get_bundle_bid(pbb_bundle, caller, pbb_bid_type, pbb_bid_asset);
      var is_xtz = (pbb_bid_type = XTZ);
      var unpack_result = verify_and_unpack_asset(pbb_bid_type, pbb_bid_asset);
      var bundle = verify_and_unpack_bundle(pbb_bundle);
      dorequire(length(bundle) <= max_bundle_items, (MAX_BUNDLE_SIZE, max_bundle_items));

      if(isnone(pbb_bid.bundle_bid_expiry_date)) then (
        pbb_bid.bundle_bid_expiry_date := some((now + default_bid_duration));
      );

      var all_operations: list<process_transfer_param> = [];
      if(issome(current_bid)) then (
          var current_bid_data = opt_get(current_bid);
          transfer 0tz to bids_storage call process_transfers<list<process_transfer_param>>([{
            ptp_asset_type = pbb_bid_type;
            ptp_asset = pbb_bid_asset;
            ptp_amount = current_bid_data.bundle_bid_amount;
            ptp_origin = bids_storage;
            ptp_destination = caller
          }]);
      );

      if(not is_xtz) then (
        transfer 0tz to transfer_manager call process_transfers<list<process_transfer_param>>([{
            ptp_asset_type = pbb_bid_type;
            ptp_asset = pbb_bid_asset;
            ptp_amount = pbb_bid.bundle_bid_amount;
            ptp_origin = caller;
            ptp_destination = bids_storage
        }]);
      ) else (
        dorequire(transferred = (pbb_bid.bundle_bid_amount * 1utz), (BID_AMOUNT_MISMATCH, transferred, pbb_bid.bundle_bid_amount * 1utz));
      );

      transfer transferred to bids_storage call set_bundle_bid<bytes * address * asset_type * bytes * bundle_bid>(
        (
          pbb_bundle,
          caller,
          pbb_bid_type,
          pbb_bid_asset,
          pbb_bid
        )
      );
    }
}

entry accept_bid(
  ab_asset_contract: address,
  ab_asset_token_id: nat,
  ab_bidder: address,
  ab_bid_type: asset_type,
  ab_bid_asset: bytes,
  ab_origin_fees: list<part>,
  ab_payouts: list<part>) {
    effect {
      var current_bid = require_some(get_bid(ab_asset_contract, ab_asset_token_id, ab_bidder, ab_bid_type, ab_bid_asset), MISSING_BID);

      if(issome(current_bid.bid_expiry_date)) then (
        dorequire(opt_get(current_bid.bid_expiry_date) > now, EXPIRED_BID);
      );

      transfer transferred to transfer_manager call manage_transfers<list<bundle_item> * address * address * nat * asset_type * bytes * address * address * address * nat * list<part> * list<part>>(
        (
          [{
            bundle_item_contract = ab_asset_contract;
            bundle_item_id = ab_asset_token_id ;
            bundle_item_qty = current_bid.bid_asset_qty
          }],
          caller,
          ab_bidder,
          current_bid.bid_amount,
          ab_bid_type,
          ab_bid_asset,
          bids_storage,
          caller,
          bids_storage,
          protocol_fee,
          current_bid.bid_origin_fees.concat(ab_origin_fees),
          current_bid.bid_payouts.concat(ab_payouts)
        )
      );


      transfer 0tz to bids_storage call remove_bid<address * nat * address * asset_type * bytes>((ab_asset_contract, ab_asset_token_id, ab_bidder, ab_bid_type, ab_bid_asset))
    }
}

entry accept_floor_bid(
  afb_asset_contract: address,
  afb_asset_token_id: nat,
  afb_bidder: address,
  afb_bid_type: asset_type,
  afb_bid_asset: bytes,
  afb_origin_fees: list<part>,
  afb_payouts: list<part>){
    effect {
      var current_bid = require_some(get_floor_bid(afb_asset_contract, afb_bidder, afb_bid_type, afb_bid_asset), MISSING_BID);

      if(issome(current_bid.bid_expiry_date)) then (
        dorequire(opt_get(current_bid.bid_expiry_date) > now, EXPIRED_BID);
      );

      transfer transferred to transfer_manager call manage_transfers<list<bundle_item> * address * address * nat * asset_type * bytes * address * address * address * nat * list<part> * list<part>>(
        (
          [{
            bundle_item_contract = afb_asset_contract;
            bundle_item_id = afb_asset_token_id ;
            bundle_item_qty = current_bid.bid_asset_qty
          }],
          caller,
          afb_bidder,
          current_bid.bid_amount,
          afb_bid_type,
          afb_bid_asset,
          bids_storage,
          caller,
          bids_storage,
          protocol_fee,
          current_bid.bid_origin_fees.concat(afb_origin_fees),
          current_bid.bid_payouts.concat(afb_payouts)
        )
      );


      transfer 0tz to bids_storage call remove_floor_bid<address * address * asset_type * bytes>((afb_asset_contract, afb_bidder, afb_bid_type, afb_bid_asset))
    }
}

entry accept_bundle_bid(
  abb_bundle: bytes,
  abb_bidder: address,
  abb_bid_type: asset_type,
  abb_bid_asset: bytes,
  abb_origin_fees: list<part>,
  abb_payouts: list<part>){
    effect {
      var current_bid = require_some(get_bundle_bid(abb_bundle, abb_bidder, abb_bid_type, abb_bid_asset), MISSING_BID);
      var unpacked_bundle = verify_and_unpack_bundle(abb_bundle);

      if(issome(current_bid.bundle_bid_expiry_date)) then (
        dorequire(opt_get(current_bid.bundle_bid_expiry_date) > now, EXPIRED_BID);
      );

      transfer transferred to transfer_manager call manage_transfers<list<bundle_item> * address * address * nat * asset_type * bytes * address * address * address * nat * list<part> * list<part>>(
        (
          unpacked_bundle,
          caller,
          abb_bidder,
          current_bid.bundle_bid_amount,
          abb_bid_type,
          abb_bid_asset,
          bids_storage,
          caller,
          bids_storage,
          protocol_fee,
          current_bid.bundle_bid_origin_fees.concat(abb_origin_fees),
          current_bid.bundle_bid_payouts.concat(abb_payouts)
        )
      );


      transfer 0tz to bids_storage call remove_bundle_bid<bytes * address * asset_type * bytes>((abb_bundle, abb_bidder, abb_bid_type, abb_bid_asset))
    }
}

entry cancel_bid(
  cb_asset_contract: address,
  cb_asset_token_id: nat,
  cb_bid_type: asset_type,
  cb_bid_asset: bytes){
    effect {
      var current_bid = require_some(get_bid(cb_asset_contract, cb_asset_token_id, caller, cb_bid_type, cb_bid_asset), MISSING_BID);

      transfer 0tz to bids_storage call process_transfers<list<process_transfer_param>>([{
        ptp_asset_type = cb_bid_type;
        ptp_asset = cb_bid_asset;
        ptp_amount = current_bid.bid_amount;
        ptp_origin = bids_storage;
        ptp_destination = caller
      }]);
      transfer 0tz to bids_storage call remove_bid<address * nat * address * asset_type * bytes>((cb_asset_contract, cb_asset_token_id, caller, cb_bid_type, cb_bid_asset))
    }
}

entry cancel_floor_bid(
  cfb_asset_contract: address,
  cfb_bid_type: asset_type,
  cfb_bid_asset: bytes){
    effect {
      var current_bid = require_some(get_floor_bid(cfb_asset_contract, caller, cfb_bid_type, cfb_bid_asset), MISSING_BID);

      transfer 0tz to bids_storage call process_transfers<list<process_transfer_param>>([{
        ptp_asset_type = cfb_bid_type;
        ptp_asset = cfb_bid_asset;
        ptp_amount = current_bid.bid_amount;
        ptp_origin = bids_storage;
        ptp_destination = caller
      }]);
      transfer 0tz to bids_storage call remove_floor_bid<address * address * asset_type * bytes>((cfb_asset_contract, caller, cfb_bid_type, cfb_bid_asset))
    }
}

entry cancel_bundle_bid(
  cbb_bundle: bytes,
  cbb_bid_type: asset_type,
  cbb_bid_asset: bytes){
    effect {
      var current_bid = require_some(get_bundle_bid(cbb_bundle, caller, cbb_bid_type, cbb_bid_asset), MISSING_BID);

      transfer 0tz to bids_storage call process_transfers<list<process_transfer_param>>([{
        ptp_asset_type = cbb_bid_type;
        ptp_asset = cbb_bid_asset;
        ptp_amount = current_bid.bundle_bid_amount;
        ptp_origin = bids_storage;
        ptp_destination = caller
      }]);
      transfer 0tz to bids_storage call remove_bundle_bid<bytes * address * asset_type * bytes>((cbb_bundle, caller, cbb_bid_type, cbb_bid_asset))
    }
}

function bid_exists(
  be_asset_contract: address,
  be_asset_token_id: nat,
  be_seller: address,
  be_sale_type: asset_type,
  be_sale_asset: bytes) : bool {
    return match callview<bool>(
        bids_storage,
        "bid_exists",
        (
            be_asset_contract,
            be_asset_token_id,
            be_seller,
            be_sale_type,
            be_sale_asset
        )
    )
    with
        | some(v) -> v
        | none -> false
    end
}

function floor_bid_exists(
  be_asset_contract: address,
  be_seller: address,
  be_sale_type: asset_type,
  be_sale_asset: bytes) : bool {
    return match callview<bool>(
        bids_storage,
        "floor_bid_exists",
        (
            be_asset_contract,
            be_seller,
            be_sale_type,
            be_sale_asset
        )
    )
    with
        | some(v) -> v
        | none -> false
    end
}

function bundle_bid_exists(
  bbe_bundle: bytes,
  bbe_seller: address,
  bbe_sale_type: asset_type,
  bbe_sale_asset: bytes) : bool {
    return match callview<bool>(
        bids_storage,
        "bundle_bid_exists",
        (
            bbe_bundle,
            bbe_seller,
            bbe_sale_type,
            bbe_sale_asset
        )
    )
    with
        | some(v) -> v
        | none -> false
    end
}

function verify_and_unpack_asset(ua_asset_type: asset_type, ua_asset_data: bytes) : (option<address> * option<nat>) {
    var buy_asset_contract: option<address> = none;
    var buy_asset_token_id: option<nat> = none;
    match ua_asset_type with
      | FA2 -> (
        match unpack<FA2_asset>(ua_asset_data) with
        | some(buyAsset) -> (
            buy_asset_contract := some(buyAsset.fa2_asset_contract);
            buy_asset_token_id := some(buyAsset.fa2_asset_token_id);
          )
        | none -> fail(CANT_UNPACK_FA2_ASSET)
        end
      )
      | FA12 -> (
        match unpack<FA12_asset>(ua_asset_data) with
        | some(buyAsset) -> (
            buy_asset_contract := some(buyAsset.fa12_asset_contract);
        )
        | none -> fail(CANT_UNPACK_FA12_ASSET)
        end
      )
      | XTZ -> (
          if(ua_asset_data <> 0x) then (
            fail(WRONG_XTZ_PAYLOAD)
          )
      )
      end;
      return ((buy_asset_contract, buy_asset_token_id))
}

function verify_and_unpack_bundle(vaub_data: bytes) : (list<bundle_item>) {
    var bundle: list<bundle_item> = [];
    match unpack<list<bundle_item>>(vaub_data) with
    | some(unpacked_bundle) -> (
        bundle := unpacked_bundle;
    )
    | none -> fail(CANT_UNPACK_BUNDLE)
    end;
    dorequire(length(bundle) > 0, BUNDLE_CANT_BE_EMPTY);
    for item in bundle do
      dorequire(item.bundle_item_qty > 0, INVALID_BUNDLE_ITEM_QTY);
    done;
    return (bundle)
}

function get_bid(
  gb_asset_contract: address,
  gb_asset_token_id: nat,
  gb_bidder: address,
  gb_bid_type: asset_type,
  gb_bid_asset: bytes) : option<bid> {
    return opt_get(callview<option<bid>>(
        bids_storage,
        "get_bid",
        (
          gb_asset_contract,
          gb_asset_token_id,
          gb_bidder,
          gb_bid_type,
          gb_bid_asset
        )
    ))
}

function get_floor_bid(
  gb_asset_contract: address,
  gb_bidder: address,
  gb_bid_type: asset_type,
  gb_bid_asset: bytes) : option<bid> {
    return opt_get(callview<option<bid>>(
        bids_storage,
        "get_floor_bid",
        (
          gb_asset_contract,
          gb_bidder,
          gb_bid_type,
          gb_bid_asset
        )
    ))
}

function get_bundle_bid(
  gbb_bundle: bytes,
  gbb_bidder: address,
  gbb_bid_type: asset_type,
  gbb_bid_asset: bytes) : option<bundle_bid> {
    return opt_get(callview<option<bundle_bid>>(
        bids_storage,
        "get_bundle_bid",
        (
          gbb_bundle,
          gbb_bidder,
          gbb_bid_type,
          gbb_bid_asset
        )
    ))
}

function bp(bp_value : nat, bp_op_value : nat) : nat {
  return abs(floor(bp_value * bp_op_value / 10000))
}

function process_total_amount(cta_amount: nat, cta_fees: nat, cta_order_origin_fees: list<part>) : nat {
 var total = cta_amount + bp(cta_amount, cta_fees);
  for item in cta_order_origin_fees do
    total += bp(cta_amount, item.part_value)
  done;
  return total
}

entry process_transfer(pt_transfer: process_transfer_param){
  called by selfaddress
  effect {
    match pt_transfer.ptp_asset_type with
    | FA2  -> (
      match unpack<FA2_asset>(pt_transfer.ptp_asset) with
      | some(buyAsset) -> (
          transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
            [
                (
                    pt_transfer.ptp_origin,
                    [
                        {
                            destination_address = pt_transfer.ptp_destination;
                            token_id = buyAsset.fa2_asset_token_id;
                            token_amount = pt_transfer.ptp_amount
                        }
                    ]
                )
            ]
          )
        )
      | none -> fail(CANT_UNPACK_FA2_ASSET)
      end;
    )
    | FA12 -> (
      match unpack<FA12_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
        )
        | none -> fail(CANT_UNPACK_FA12_ASSET)
        end
      )
    | XTZ -> (
          transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
      )
    end;
  }
}

entry default() {}