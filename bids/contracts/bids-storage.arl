archetype bids_storage(
  owner: address
)
with metadata ""

constant CANT_UNPACK_FA12_ASSET     : string = "CANT_UNPACK_FA12_BID_ASSET"
constant CANT_UNPACK_FA2_ASSET      : string = "CANT_UNPACK_FA2_BID_ASSET"
constant INVALID_CALLER             : string = "INVALID_CALLER"
constant MISSING_BIDS_CONTRACT      : string = "MISSING_BIDS_CONTRACT"
constant MISSING_OWNER_CANDIDATE    : string = "MISSING_OWNER_CANDIDATE"
constant MISSING_TRANSFER_MANAGER   : string = "MISSING_TRANSFER_MANAGER"

enum asset_type =
| XTZ
| FA12
| FA2

record FA2_asset {
  fa2_asset_contract : address;
  fa2_asset_token_id: nat;
}

record FA12_asset {
  fa12_asset_contract : address;
}

record part {
  part_account : address;
  part_value   : nat;
}

record bundle_item {
  bundle_item_contract : address;
  bundle_item_id   : nat;
  bundle_item_qty   : nat;
}

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  constant {
    owner_candidate_addr ?is owner_candidate otherwise MISSING_OWNER_CANDIDATE;
  }
  require {
    co1: owner_candidate_addr = caller otherwise INVALID_CALLER
  }
  effect {
    owner := owner_candidate_addr;
    owner_candidate := none
  }
}

//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_bids_contract(sbc_contract : address) {
  called by owner
  effect {
    bids_contract := some(sbc_contract);
  }
}

entry set_transfer_manager(stm_contract : address) {
  called by owner
  effect {
    transfer_manager := some(stm_contract);
  }
}

//----------------------------------------------------------------------------
// Auction
//----------------------------------------------------------------------------
variable bids_contract : option<address> = none
variable transfer_manager : option<address> = none

record bid {
  bid_origin_fees : list<part>;
  bid_payouts : list<part>;
  bid_amount : nat;
  bid_asset_qty: nat;
  bid_expiration_date : option<date>;
  bid_data_type  : option<bytes>;
  bid_data       : option<bytes>;
}

record bundle_bid {
  bundle_bid_origin_fees : list<part>;
  bundle_bid_payouts : list<part>;
  bundle_bid_amount : nat;
  bundle_bid_expiration_date : option<date>;
  bundle_bid_data_type  : option<bytes>;
  bundle_bid_data       : option<bytes>;
}

asset bids identified by bid_asset_contract bid_asset_token_id bid_asset_bidder bid_type bid_asset to big_map {
  bid_asset_contract : address;
  bid_asset_token_id: nat;
  bid_asset_bidder: address;
  bid_type: asset_type;
  bid_asset : bytes;
  bid_record: bid;
}

asset floor_bids identified by floor_bid_asset_contract floor_bid_asset_bidder floor_bid_type floor_bid_asset to big_map {
  floor_bid_asset_contract : address;
  floor_bid_asset_bidder: address;
  floor_bid_type: asset_type;
  floor_bid_asset : bytes;
  floor_bid_record: bid;
}

asset bundle_bids identified by bundle_bids_bunde bundle_bids_asset_seller bundle_bids_type bundle_bids_asset to big_map {
  bundle_bids_bunde: bytes;
  bundle_bids_asset_seller: address;
  bundle_bids_type: asset_type;
  bundle_bids_asset : bytes;
  bundle_bids_record: bundle_bid;
}

record process_transfer_param {
  ptp_asset_type: asset_type;
  ptp_asset: bytes;
  ptp_amount: nat;
  ptp_origin: address;
  ptp_destination: address;
}

record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

entry set_bid(
  sb_asset_contract: address,
  sb_asset_token_id: nat,
  sb_bidder: address,
  sb_bid_type: asset_type,
  sb_bid_asset: bytes,
  sb_bid : bid) {
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT
  }
  require {
    sb1: bids_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    bids.add_update(
      (
        sb_asset_contract,
        sb_asset_token_id,
        sb_bidder,
        sb_bid_type,
        sb_bid_asset
      ),
      {
        bid_record = sb_bid
      }
    );
  }
}

entry set_floor_bid(
  sb_asset_contract: address,
  sb_bidder: address,
  sb_bid_type: asset_type,
  sb_bid_asset: bytes,
  sb_bid : bid) {
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT
  }
  require {
    sfb1: bids_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    floor_bids.add_update(
      (
        sb_asset_contract,
        sb_bidder,
        sb_bid_type,
        sb_bid_asset
      ),
      {
        floor_bid_record = sb_bid
      }
    );
  }
}

entry set_bundle_bid(
  sbb_bundle: bytes,
  sbb_seller: address,
  sbb_bid_type: asset_type,
  sbb_bid_asset: bytes,
  sbb_bid: bundle_bid) {
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT
  }
  require {
    sbb1: bids_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    bundle_bids.add_update(
      (
        sbb_bundle,
        sbb_seller,
        sbb_bid_type,
        sbb_bid_asset
      ),
      {
        bundle_bids_record = sbb_bid
      }
    );
  }
}

entry remove_bid(
  rb_asset_contract: address,
  rb_asset_token_id: nat,
  rb_bidder: address,
  rb_bid_type: asset_type,
  rb_bid_asset: bytes) {
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT
  }
  require {
    rb1: bids_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    bids.remove((rb_asset_contract, rb_asset_token_id, rb_bidder, rb_bid_type, rb_bid_asset));
  }
}

entry remove_floor_bid(
  rb_asset_contract: address,
  rb_bidder: address,
  rb_bid_type: asset_type,
  rb_bid_asset: bytes) {
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT
  }
  require {
    rfb1: bids_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    floor_bids.remove((rb_asset_contract, rb_bidder, rb_bid_type, rb_bid_asset));
  }
}

entry remove_bundle_bid(
  rbb_bundle: bytes,
  rbb_seller: address,
  rbb_sale_type: asset_type,
  rbb_sale_asset: bytes) {
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT
  }
  require {
    rbb1: bids_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    bundle_bids.remove((rbb_bundle, rbb_seller, rbb_sale_type, rbb_sale_asset));
  }
}

view bid_exists(
  be_asset_contract: address,
  be_asset_token_id: nat,
  be_bidder: address,
  be_bid_type: asset_type,
  be_bid_asset: bytes) : bool {
  return bids.contains((be_asset_contract, be_asset_token_id, be_bidder, be_bid_type, be_bid_asset))
}

view floor_bid_exists(
  be_asset_contract: address,
  be_bidder: address,
  be_bid_type: asset_type,
  be_bid_asset: bytes) : bool {
  return floor_bids.contains((be_asset_contract, be_bidder, be_bid_type, be_bid_asset))
}

view bundle_bid_exists(
  bbe_bundle: bytes,
  bbe_seller: address,
  bbe_sale_type: asset_type,
  bbe_sale_asset: bytes) : bool {
  return bundle_bids.contains((bbe_bundle, bbe_seller, bbe_sale_type, bbe_sale_asset))
}

view get_bid(
  gb_asset_contract: address,
  gb_asset_token_id: nat,
  gb_bidder: address,
  gb_bid_type: asset_type,
  gb_bid_asset: bytes) : option<bid> {
    return bids[(gb_asset_contract, gb_asset_token_id, gb_bidder, gb_bid_type, gb_bid_asset)]?.bid_record
}

view get_floor_bid(
  gb_asset_contract: address,
  gb_bidder: address,
  gb_bid_type: asset_type,
  gb_bid_asset: bytes) : option<bid> {
    return floor_bids[(gb_asset_contract, gb_bidder, gb_bid_type, gb_bid_asset)]?.floor_bid_record
}

view get_bundle_bid(
  gbb_bundle: bytes,
  gbb_seller: address,
  gbb_bid_type: asset_type,
  gbb_bid_asset: bytes) : option<bundle_bid> {
    return bundle_bids[(gbb_bundle, gbb_seller, gbb_bid_type, gbb_bid_asset)]?.bundle_bids_record
}

entry process_transfers(pt_transfers: list<process_transfer_param>){
  constant {
    bids_contract_addr ?is bids_contract otherwise MISSING_BIDS_CONTRACT;
    transfer_manager_addr ?is transfer_manager otherwise MISSING_BIDS_CONTRACT
  }
  require {
    pt1: bids_contract_addr = caller or transfer_manager_addr = caller otherwise INVALID_CALLER
  }
  effect {
    for pt_transfer in pt_transfers do
      match pt_transfer.ptp_asset_type with
      | FA2  -> (
        match unpack<FA2_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
              [
                  (
                      pt_transfer.ptp_origin,
                      [
                          {
                              destination_address = pt_transfer.ptp_destination;
                              token_id = buyAsset.fa2_asset_token_id;
                              token_amount = pt_transfer.ptp_amount
                          }
                      ]
                  )
              ]
            )
          )
        | none -> fail(CANT_UNPACK_FA2_ASSET)
        end;
      )
      | FA12 -> (
        match unpack<FA12_asset>(pt_transfer.ptp_asset) with
          | some(buyAsset) -> (
              transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
          )
          | none -> fail(CANT_UNPACK_FA12_ASSET)
          end
        )
      | XTZ -> (
            transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
        )
      end;
    done
  }
}


entry default() {}