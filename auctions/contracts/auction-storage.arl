archetype auction_storage(
  owner: address
)
with metadata ""

constant CANT_UNPACK_FA12_BUY_ASSET : string = "CANT_UNPACK_FA12_BUY_ASSET"
constant CANT_UNPACK_FA2_BUY_ASSET  : string = "CANT_UNPACK_FA2_BUY_ASSET"
constant INVALID_CALLER             : string = "INVALID_CALLER"
constant MISSING_AUCTION            : string = "MISSING_AUCTION"
constant MISSING_AUCTION_CONTRACT   : string = "MISSING_AUCTION_CONTRACT"
constant MISSING_OWNER_CANDIDATE    : string = "MISSING_OWNER_CANDIDATE"
constant MISSING_TRANSFER_MANAGER   : string = "MISSING_TRANSFER_MANAGER"

enum asset_type =
| XTZ
| FA12
| FA2

record FA2_asset {
  fa2_asset_contract : address;
  fa2_asset_token_id: nat;
}

record FA12_asset {
  fa12_asset_contract : address;
}

record part {
  part_account : address;
  part_value   : nat;
}

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  require {
    r_dc_0: transferred = 0utz;
  }
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  constant {
    owner_candidate_addr ?is owner_candidate otherwise MISSING_OWNER_CANDIDATE;
  }
  require {
    r_co_0: owner_candidate_addr = caller otherwise INVALID_CALLER;
    r_co_1: transferred = 0utz;
  }
  effect {
    owner := owner_candidate_addr;
    owner_candidate := none
  }
}

//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_auction_contract(sac_contract : address) {
  called by owner
  require {
    r_sac_0: transferred = 0utz;
  }
  effect {
    auction_contract := some(sac_contract);
  }
}

entry set_transfer_manager(stm_contract : address) {
  called by owner
  require {
    r_stm_0: transferred = 0utz;
  }
  effect {
    transfer_manager := some(stm_contract);
  }
}

//----------------------------------------------------------------------------
// Auction
//----------------------------------------------------------------------------
variable auction_contract : option<address> = none
variable transfer_manager : option<address> = none

record bid {
  bid_origin_fees : list<part>;
  bid_payouts : list<part>;
  bid_amount : nat;
  bid_bidder: address;
  bid_data_type  : option<bytes>;
  bid_data       : option<bytes>;
}

record auction_record {
  auction_sell_asset_amount: nat;
  auction_buy_asset_type : asset_type;
  auction_buy_asset : bytes;
  auction_last_bid: option<bid>;
  auction_start_time: date;
  auction_end_time: date;
  auction_minimal_price: nat;
  auction_buy_out_price: nat;
  auction_minimal_step: nat;
  auction_max_seller_fees: nat;
  auction_origin_fees : list<part>;
  auction_payouts : list<part>;
  auction_data_type  : option<bytes>;
  auction_data       : option<bytes>;
}

record bundle_auction_record {
  bar_buy_asset_type : asset_type;
  bar_buy_asset : bytes;
  bar_last_bid: option<bid>;
  bar_start_time: date;
  bar_end_time: date;
  bar_minimal_price: nat;
  bar_buy_out_price: nat;
  bar_minimal_step: nat;
  bar_max_seller_fees: nat;
  bar_origin_fees : list<part>;
  bar_payouts : list<part>;
  bar_data_type  : option<bytes>;
  bar_data       : option<bytes>;
}

asset auctions identified by auction_asset auction_asset_id auction_asset_seller to big_map {
  auction_asset : address;
  auction_asset_id: nat;
  auction_asset_seller: address;
  auction : auction_record;
}

asset bundle_auctions identified by bundle_auctions_bundle bundle_auctions_seller to big_map {
  bundle_auctions_bundle : bytes;
  bundle_auctions_seller: address;
  bundle_auction : bundle_auction_record;
}

record process_transfer_param {
  ptp_asset_type: asset_type;
  ptp_asset: bytes;
  ptp_amount: nat;
  ptp_origin: address;
  ptp_destination: address;
}

record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

entry set_auction(sa_asset_contract: address, sa_asset_id: nat, sa_asset_seller: address, sa_auction : auction_record) {
  constant {
    auction_contract_addr ?is auction_contract otherwise MISSING_AUCTION_CONTRACT;
  }
  require {
    sa1: auction_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    auctions.add_update(
      (
        sa_asset_contract,
        sa_asset_id,
        sa_asset_seller
      ),
      {
        auction = sa_auction
      }
    );
  }
}

entry set_bundle_auction(sba_bundle: bytes, sba_seller: address, sba_auction : bundle_auction_record) {
  constant {
    auction_contract_addr ?is auction_contract otherwise MISSING_AUCTION_CONTRACT;
  }
  require {
    sba1: auction_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    bundle_auctions.add_update(
      (
        sba_bundle,
        sba_seller
      ),
      {
        bundle_auction = sba_auction
      }
    );
  }
}

entry remove_auction(ra_asset : address, ra_asset_id : nat, ra_asset_seller: address) {
  constant {
    auction_contract_addr ?is auction_contract otherwise MISSING_AUCTION_CONTRACT;
  }
  require {
    ra1: auction_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    auctions.remove((ra_asset, ra_asset_id, ra_asset_seller));
  }
}

entry remove_bundle_auction(rba_bundle : bytes, rba_seller: address) {
  constant {
    auction_contract_addr ?is auction_contract otherwise MISSING_AUCTION_CONTRACT;
  }
  require {
    rba1: auction_contract_addr = caller otherwise INVALID_CALLER
  }
  effect {
    bundle_auctions.remove((rba_bundle, rba_seller));
  }
}

view auction_exists(ae_asset : address, ae_asset_id : nat, ae_asset_seller: address) : bool {
  return auctions.contains((ae_asset, ae_asset_id, ae_asset_seller))
}

view bundle_auction_exists(bae_bundle : bytes, bae_seller: address) : bool {
  return bundle_auctions.contains((bae_bundle, bae_seller))
}

view get_auction(ga_asset : address, ga_asset_id : nat, ga_asset_seller: address) : option<auction_record> {
  return auctions[(ga_asset, ga_asset_id, ga_asset_seller)]?.auction
}

view get_bundle_auction(gba_bundle : bytes, gba_seller: address) : option<bundle_auction_record> {
  return (bundle_auctions[(gba_bundle, gba_seller)]?.bundle_auction)
}

entry process_transfers(pt_transfers: list<process_transfer_param>){
  constant {
    auction_contract_addr ?is auction_contract otherwise MISSING_AUCTION_CONTRACT;
    transfer_manager_addr ?is transfer_manager otherwise MISSING_TRANSFER_MANAGER;
  }
  require {
    pt1: auction_contract_addr = caller or transfer_manager_addr = caller otherwise INVALID_CALLER
  }
  effect {
    for pt_transfer in pt_transfers do
      match pt_transfer.ptp_asset_type with
      | FA2  -> (
        match unpack<FA2_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
              [
                  (
                      pt_transfer.ptp_origin,
                      [
                          {
                              destination_address = pt_transfer.ptp_destination;
                              token_id = buyAsset.fa2_asset_token_id;
                              token_amount = pt_transfer.ptp_amount
                          }
                      ]
                  )
              ]
            )
          )
        | none -> fail(CANT_UNPACK_FA2_BUY_ASSET)
        end;
      )
      | FA12 -> (
        match unpack<FA12_asset>(pt_transfer.ptp_asset) with
          | some(buyAsset) -> (
              transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
          )
          | none -> fail(CANT_UNPACK_FA12_BUY_ASSET)
          end
        )
      | XTZ -> (
            transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
        )
      end;
    done
  }
}