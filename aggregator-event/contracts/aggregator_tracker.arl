archetype aggregator_tracker(owner : address)
with metadata "" // QmXbuUyyJXW1RRuL3k81Kpe2HULbYLj1sUUq44Nuxa5z8h

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/* PAUSABLE ---------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  called by owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  called by owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  called by owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(k, d)
  }
}

// Events -----------------------------------------------------------
event aggregator_event {
  event_source: string;
  buyer : address;
  sales: list<sale>
}

record sale {
  sale_type: string;
  sale_marketplace: string;
  sale_contract: address;
  sale_token_id: nat;
  sale_qty: nat;
  sale_price_per_item: nat;
}

// Entries ----------------------------------------------------------
entry log_event(agg_event : aggregator_event) {
  require {
    require_not_paused : is_not_paused()
  }
  effect {
    emit<aggregator_event>(agg_event)
  }
}