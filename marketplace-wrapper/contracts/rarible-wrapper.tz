# (Pair owner (Pair router (Pair rarible_sales (Pair False (Pair None (Pair 0 (Pair { } { Elt "" 0x })))))))
{
  storage (pair (address %owner) (pair (address %router) (pair (address %rarible_sales) (pair (bool %paused) (pair (option %owner_candidate address) (pair (nat %protocol_fee) (pair (big_map %contracts string (pair (address %contract_wrapper) (list %contract_registered_entrypoints string))) (big_map %metadata string bytes))))))));
  parameter (or (or (or (pair %set_metadata (string %k) (option %d bytes)) (unit %pause)) (or (unit %unpause) (address %set_router))) (or (or (address %set_rarible_sales) (address %declare_ownership)) (or (unit %claim_ownership) (pair %handle_routed_operation (string %hro_entrypoint) (bytes %hro_payload)))));
  code { LAMBDA
           bool
           bool
           { PUSH unit Unit;
             DUP 2;
             IF
               { PUSH string "CONTRACT_PAUSED";
                 FAILWITH }
               {  };
             PUSH bool True;
             SWAP;
             DROP;
             DUG 1;
             DROP };
         LAMBDA
           bytes
           (pair (address %s_asset_contract) (pair (nat %s_asset_token_id) (pair (int %s_sale_type) (pair (bytes %s_sale_asset) (pair %s_sale (list %sale_origin_fees (pair (address %part_account) (nat %part_value))) (pair (list %sale_payouts (pair (address %part_account) (nat %part_value))) (pair (nat %sale_amount) (pair (nat %sale_asset_qty) (pair (option %sale_start timestamp) (pair (option %sale_end timestamp) (pair (nat %sale_max_fees_base_boint) (pair (option %sale_data_type bytes) (option %sale_data bytes)))))))))))))
           { PUSH unit Unit;
             DUP 2;
             UNPACK (pair address (pair nat (pair int (pair bytes (pair (list (pair address nat)) (pair (list (pair address nat)) (pair nat (pair nat (pair (option timestamp) (pair (option timestamp) (pair nat (pair (option bytes) (option bytes)))))))))))));
             IF_NONE
               { PUSH string "FAILED_TO_UNPACK_RARIBLE_SELL_ARGS";
                 FAILWITH }
               { DUP;
                 DIP { DIG 1; DROP };
                 DUG 1;
                 DROP };
             DUG 1;
             DROP };
         LAMBDA
           bytes
           (pair (address %b_asset_contract) (pair (nat %b_asset_token_id) (pair (address %b_seller) (pair (int %b_sale_type) (pair (bytes %b_sale_asset) (pair (nat %b_amount) (pair (list %b_origin_fees (pair (address %part_account) (nat %part_value))) (list %b_payouts (pair (address %part_account) (nat %part_value))))))))))
           { PUSH unit Unit;
             DUP 2;
             UNPACK (pair address (pair nat (pair address (pair int (pair bytes (pair nat (pair (list (pair address nat)) (list (pair address nat)))))))));
             IF_NONE
               { PUSH string "FAILED_TO_UNPACK_RARIBLE_BUY_ARGS";
                 FAILWITH }
               { DUP;
                 DIP { DIG 1; DROP };
                 DUG 1;
                 DROP };
             DUG 1;
             DROP };
         LAMBDA
           bytes
           (pair (address %c_asset_contract) (pair (nat %c_asset_token_id) (pair (int %c_sale_type) (bytes %c_sale_asset))))
           { PUSH unit Unit;
             DUP 2;
             UNPACK (pair address (pair nat (pair int bytes)));
             IF_NONE
               { PUSH string "FAILED_TO_UNPACK_RARIBLE_CANCEL_ARGS";
                 FAILWITH }
               { DUP;
                 DIP { DIG 1; DROP };
                 DUG 1;
                 DROP };
             DUG 1;
             DROP };
         NIL operation;
         DIG 5;
         UNPAIR;
         DIP { UNPAIR 8 };
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { UNPAIR;
                     SWAP;
                     DUP 3;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     DUP 15;
                     DUP 7;
                     EXEC;
                     NOT;
                     IF
                       { PUSH string "md_r1";
                         PUSH string "INVALID_CONDITION";
                         PAIR;
                         FAILWITH }
                       {  };
                     DUP 10;
                     DUP 2;
                     DUP 4;
                     UPDATE;
                     DIP { DIG 9; DROP };
                     DUG 9;
                     DROP 2;
                     PAIR 8;
                     DIG 1;
                     PAIR }
                   { DROP;
                     DUP;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     DUP 13;
                     DUP 5;
                     EXEC;
                     NOT;
                     IF
                       { PUSH string "pausable_r1";
                         PUSH string "INVALID_CONDITION";
                         PAIR;
                         FAILWITH }
                       {  };
                     PUSH bool True;
                     DIP { DIG 3; DROP };
                     DUG 3;
                     PAIR 8;
                     DIG 1;
                     PAIR } }
               { IF_LEFT
                   { DROP;
                     DUP;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     DUP 4;
                     NOT;
                     IF
                       { PUSH string "CONTRACT_NOT_PAUSED";
                         FAILWITH }
                       {  };
                     PUSH bool False;
                     DIP { DIG 3; DROP };
                     DUG 3;
                     PAIR 8;
                     DIG 1;
                     PAIR }
                   { DUP 2;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     DUP;
                     DIP { DIG 2; DROP };
                     DUG 2;
                     DROP;
                     PAIR 8;
                     DIG 1;
                     PAIR } } }
           { IF_LEFT
               { IF_LEFT
                   { DUP 2;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     DUP;
                     DIP { DIG 3; DROP };
                     DUG 3;
                     DROP;
                     PAIR 8;
                     DIG 1;
                     PAIR }
                   { DUP 2;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     DUP;
                     SOME;
                     DIP { DIG 5; DROP };
                     DUG 5;
                     DROP;
                     PAIR 8;
                     DIG 1;
                     PAIR } }
               { IF_LEFT
                   { DROP;
                     DUP 5;
                     IF_NONE
                       { PUSH bool False }
                       { SENDER;
                         DUP 2;
                         COMPARE;
                         EQ;
                         SWAP;
                         DROP };
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     SENDER;
                     SWAP;
                     DROP;
                     NONE address;
                     DIP { DIG 4; DROP };
                     DUG 4;
                     PAIR 8;
                     DIG 1;
                     PAIR }
                   { UNPAIR;
                     SWAP;
                     DUP 4;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "INVALID_CALLER";
                         FAILWITH }
                       {  };
                     PUSH string "buy";
                     DUP 3;
                     COMPARE;
                     EQ;
                     IF
                       { DUP 13;
                         DUP 2;
                         EXEC;
                         NIL operation;
                         NIL operation;
                         DUP 14;
                         ITER { CONS };
                         DUP 8;
                         CONTRACT %buy (pair address (pair nat (pair address (pair int (pair bytes (pair nat (pair (list (pair address nat)) (list (pair address nat)))))))));
                         IF_NONE
                           { PUSH string "buy";
                             PUSH string "ENTRY_NOT_FOUND";
                             PAIR;
                             FAILWITH }
                           {  };
                         PUSH mutez 0;
                         DUP 5;
                         TRANSFER_TOKENS;
                         CONS;
                         ITER { CONS };
                         DIP { DIG 11; DROP };
                         DUG 11;
                         DROP }
                       { PUSH string "sell";
                         DUP 3;
                         COMPARE;
                         EQ;
                         IF
                           { DUP 14;
                             DUP 2;
                             EXEC;
                             NIL operation;
                             NIL operation;
                             DUP 14;
                             ITER { CONS };
                             DUP 8;
                             CONTRACT %sell (pair address (pair nat (pair int (pair bytes (pair (list (pair address nat)) (pair (list (pair address nat)) (pair nat (pair nat (pair (option timestamp) (pair (option timestamp) (pair nat (pair (option bytes) (option bytes)))))))))))));
                             IF_NONE
                               { PUSH string "sell";
                                 PUSH string "ENTRY_NOT_FOUND";
                                 PAIR;
                                 FAILWITH }
                               {  };
                             PUSH mutez 0;
                             DUP 5;
                             TRANSFER_TOKENS;
                             CONS;
                             ITER { CONS };
                             DIP { DIG 11; DROP };
                             DUG 11;
                             DROP }
                           { PUSH string "cancel";
                             DUP 3;
                             COMPARE;
                             EQ;
                             IF
                               { DUP 12;
                                 DUP 2;
                                 EXEC;
                                 NIL operation;
                                 NIL operation;
                                 DUP 14;
                                 ITER { CONS };
                                 DUP 8;
                                 CONTRACT %cancel_sale (pair address (pair nat (pair int bytes)));
                                 IF_NONE
                                   { PUSH string "cancel_sale";
                                     PUSH string "ENTRY_NOT_FOUND";
                                     PAIR;
                                     FAILWITH }
                                   {  };
                                 PUSH mutez 0;
                                 DUP 5;
                                 TRANSFER_TOKENS;
                                 CONS;
                                 ITER { CONS };
                                 DIP { DIG 11; DROP };
                                 DUG 11;
                                 DROP }
                               { PUSH string "UNSUPPORTED_RARIBLE_OPERATION";
                                 FAILWITH } } };
                     DROP 2;
                     PAIR 8;
                     DIG 1;
                     PAIR } } };
         DIP { DROP 4 } };
}

