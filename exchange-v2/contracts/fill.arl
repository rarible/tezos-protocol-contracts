/**
 * The Fill contract provides the fill data to the Exchange contract.
 */
archetype fill_storage(owner : address)
with metadata ""

constant MISSING_OWNER_CANDIDATE        : string = "MISSING_OWNER_CANDIDATE"
constant INVALID_CALLER                 : string = "INVALID_CALLER"
constant NOT_FOUND                      : string = "NOT_FOUND"

//----------------------------------------------------------------------------
// Metadata
//----------------------------------------------------------------------------

entry set_metadata_uri(idata : bytes) {
  called by owner
  effect {
    metadata := put(metadata, "", idata)
  }
}

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address>       = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  constant {
    owner_candidate_addr ?is owner_candidate otherwise MISSING_OWNER_CANDIDATE;
  }
  require {
    co1: owner_candidate_addr = caller otherwise INVALID_CALLER
  }
  effect {
    owner := owner_candidate_addr;
    owner_candidate := none
  }
}


//----------------------------------------------------------------------------
// User role
//----------------------------------------------------------------------------

asset user {
  addr : address
}

entry add_user(new_user : address) {
  called by owner
  effect {
    user.add({ new_user })
  }
}

entry rm_user(old_user : address) {
  called by owner
  effect {
    user.remove(old_user)
  }
}

//----------------------------------------------------------------------------
// Fill storage
//----------------------------------------------------------------------------

variable fill : big_map<bytes, option<nat>> = []

// READ
view get(k : bytes) : option<nat> {
  const res ?= fill[k] : NOT_FOUND;
  return res
}

view contains(k : bytes) : bool {
  return fill.contains(k)
}

/**
* Called by the cancel entrypoint of the Exchange contract.
* It sets the value to none because a canceled order can never be filled again.
*/
entry remove(k : bytes) {
  called by user
  effect {
    fill.put(k, none<nat>)
  }
}

entry put(k : bytes, v : nat) {
  called by user
  effect {
    fill.put(k, some(v))
  }
}