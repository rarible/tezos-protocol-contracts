/**
 * The Transfer Proxy contract is called by the Transfer Manager contract via the do_transfers entrypoint.
 * It receives a list of operations and injects them.
 * This is the contract to be declared as operator by FA 2 tokens and to be approved by FA 1.2 tokens.
 */
archetype transfer_proxy(owner : address)
with metadata ""

constant MISSING_OWNER_CANDIDATE        : string = "MISSING_OWNER_CANDIDATE"
constant INVALID_CALLER                 : string = "INVALID_CALLER"
constant NOT_FOUND                      : string = "NOT_FOUND"

//----------------------------------------------------------------------------
// Metadata
//----------------------------------------------------------------------------

entry set_metadata_uri(idata : bytes) {
  called by owner
  effect {
    metadata := put(metadata, "", idata)
  }
}

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address>       = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  constant {
    owner_candidate_addr ?is owner_candidate otherwise MISSING_OWNER_CANDIDATE;
  }
  require {
    co1: owner_candidate_addr = caller otherwise INVALID_CALLER
  }
  effect {
    owner := owner_candidate_addr;
    owner_candidate := none
  }
}

//----------------------------------------------------------------------------
// User role
//----------------------------------------------------------------------------

asset user {
  addr : address
}

entry add_user(new_user : address) {
  called by owner
  effect {
    user.add({ new_user })
  }
}

entry rm_user(old_user : address) {
  called by owner
  effect {
    user.remove(old_user)
  }
}

//----------------------------------------------------------------------------
// PROXY
//----------------------------------------------------------------------------

entry do_transfers(arg : lambda<unit,list<operation>>) {
  called by user
  effect {
    operations := exec_lambda(arg, Unit)
  }
}
