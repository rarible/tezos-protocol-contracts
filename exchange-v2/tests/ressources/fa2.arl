archetype nft(owner : address, royaltiesContract : address)
with metadata ""

record part {
  partAccount : address;
  partValue   : nat;
}

asset ledger identified by ltoken lowner to big_map {
  ltoken     : nat;
  lowner     : address;
  lamount    : nat = 0;
}

asset operator identified by oaddr otoken oowner to big_map {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
  oempty      : unit = Unit;
}

asset operator_for_all identified by fa_oaddr fa_oowner to big_map {
  fa_oaddr    : address;
  fa_oowner   : address;
  fa_empty    : unit = Unit;
}

asset token_metadata to big_map {
  key_token_id   : nat;
  extras         : map<string, string>;
}

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

entry update_operators (upl : list<or<operator_param, operator_param>>) {
  for up in upl do
    match up with
    | left(param)  -> (* add *)
      do_require(ledger.contains((param.opp_token_id, source)), "CALLER NOT OWNER");
      operator.add({oaddr = param.opp_operator; otoken = param.opp_token_id; oowner = param.opp_owner })
    | right(param) -> (* remove *)
      do_require(ledger.contains((param.opp_token_id, source)), "CALLER NOT OWNER");
      operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
    end;
  done;
}

entry update_operators_for_all (upl : list<or<address, address>>) {
  for up in upl do
    match up with
    | left(op)  -> (* add *)
      operator_for_all.add_update((op, source), {  })
    | right(op) -> (* remove *)
      operator_for_all.remove((op, source))
    end;
  done;
}

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to, (token_id, amount)))

entry %transfer (txs : list<address * list<transfer_destination>>) {
  for tx in txs do
    var %from = tx[0];
    var tds = tx[1];
    for td in tds do begin
      if caller <> %from then begin
        (* check operator *)
        do_require(operator.contains((caller,td.token_id_dest,%from)) or operator_for_all.contains((caller, %from)),"FA2_NOT_OPERATOR");
      end;
      (* set token ownership *)
      var tokenid = td.token_id_dest;
      var amount = ledger[(tokenid, %from)].lamount;
      if td.token_amount_dest > amount then
        fail("FA2_INSUFFICIENT_BALANCE")
      else if td.token_amount_dest = amount then
        ledger.remove((tokenid, %from))
      else
        ledger.update((tokenid, %from), { lamount -= td.token_amount_dest });
      ledger.add_update((tokenid, td.to_dest), { lamount += td.token_amount_dest })
    end done;
  done
}

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br -> {
    request = br;
    balance_ = (
      if ledger.contains((br.btoken_id, br.bo_owner))
      then ledger[(br.btoken_id, br.bo_owner)].lamount
      else 0
    )
  })
}

entry mint (itokenid : nat, iowner : address, iamount : nat, royalties : list<part>) {
  called by owner
  effect {
    transfer 0tz to royaltiesContract call set_royalties<address * option<nat> * list<part>>((self_address, some(itokenid), royalties));
    ledger.add_update((itokenid, iowner),{ lamount += iamount });
  }
}

entry burn(itokenid : nat, iowner : address, iamount : nat) {
  called by owner
  effect {
    var vamount = ledger[(itokenid, iowner)].lamount;
    if (vamount > iamount)
    then ledger.update((itokenid, iowner), { lamount -= iamount })
    else if (vamount = iamount)
      then ledger.remove((itokenid, iowner))
      else fail("FA2_INSUFFICIENT_BALANCE")
  }
}

entry setMetadataUri(idata : bytes) {
  called by owner
  effect {
    metadata := put(metadata, "", idata)
  }
}

entry setTokenMetadata(iTokenId : nat, iExtras : map<string, string>) {
  called by owner
  effect {
    token_metadata.add_update(iTokenId, {extras = iExtras});
  }
}
